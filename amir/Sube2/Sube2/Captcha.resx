<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnYenile.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>